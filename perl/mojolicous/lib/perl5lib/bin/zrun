#!/usr/bin/perl
#!/opt/local/bin/perl
use strict;
use warnings;

use Getopt::Long;
use Carp;
use Util::Run;
use Data::Dump;
use Util::IniParse qw/ini_parse/;

#
#  测试依赖环境变量ZRUN_DEBUG
#

#  命令行参数处理
my $cfg_file;
my $rtn = GetOptions(
  "file|f=s" => \$cfg_file,
);
unless($rtn){
    &usage;
    exit 0;
}

unless( -f $cfg_file) {
    warn "file $cfg_file does not exists";
    &usage;
    exit 0;
}

# 解析zrun配置文件 
my $module_cfg = ini_parse($cfg_file) or &usage and confess "can not parse file $cfg_file";
my $prop_cfg = delete $module_cfg->{property};

#
for my $section (keys %{$module_cfg}) {
    my $sec = $module_cfg->{$section};
    for my $key (keys %{$sec}) {
        if ( $sec->{$key} =~ /\${(\w+)}/ ) {
            my $pname = $1;
            if (exists $prop_cfg->{$pname}) {
                $sec->{$key} =~ s/\${\w+}/$prop_cfg->{$pname}/e;
            }
        }
    }
}
my $kernel_cfg = delete $module_cfg->{kernel};  # kernel配置段


# args and main 处理
# args处理
my $args      = delete $kernel_cfg->{args};
$args = [ split '\s+', $args ] if defined $args;
my $main;
my $main_file = delete $kernel_cfg->{main};
confess "main must be provided" unless $main_file;
confess "file[$main_file] does not exists" unless -f $main_file;
$main = do $main_file or confess "can not do file[$main_file] error[$@]";


#
# 管道配置 
#
my $chnls = delete $kernel_cfg->{channel};
$kernel_cfg->{channel} = [ split /\s+/, $chnls ] if defined $chnls;

#
# 模块参数配置 
#
for my $mname (keys %$module_cfg) {
    my $m = $module_cfg->{$mname};
    $m->{para}    = [split /\s+/, $m->{para}]    if defined $m->{para};
    $m->{mwriter} = [split /\s+/, $m->{mwriter}] if defined $m->{mwriter};
    $m->{mreader} = [split /\s+/, $m->{mreader}] if defined $m->{mreader};
    $m->{size}    = 1 unless $m->{size};

    if ($m->{code} && $m->{exec}) {
        croak "code and exec are mutual execlusive";
        exit 0;
    }

    if ($m->{code})  {
        my $cref = do $m->{code} or  croak "can not do file[$m->{code}] error[$@]";
        croak "code for $mname is not cref" unless 'CODE' eq ref $cref;
        $m->{code} = $cref;
    }
    else {
       unless( $m->{exec} ) {
          confess "exec and code both don't exist";
       }
       unless( -f $m->{exec} ) {
           confess "file $m->{exec} does not exist";
       } 
    }
}
my $plugin_cfg = delete $kernel_cfg->{plugin};

# Data::Dump->dump($kernel_cfg);
# Data::Dump->dump($module_cfg);

zkernel->launch($kernel_cfg);

do $plugin_cfg or die "can not do file[$plugin_cfg] error[$@]";

zkernel->run(
    {
        main   => $main,
        args   => $args,
        module => $module_cfg
    }
);


#--------------------------------------------
# 启动 kernel
#--------------------------------------------


sub usage {
    my $usage =<<EOF;
    zrun -f[--file] zrun.conf
EOF
    warn $usage;
}



__END__
################################################
# ----------------------------------------------
# 属性定义
# ----------------------------------------------
# [property]
# apphome = /home/hary/workspace/zbp
#
# ----------------------------------------------
# 核心配置
# 1. context为主进程与子进程共享资源模块，
#    do context.pl 必须返回一个href or aref 
# 2. main为主控函数，do main.pl必须返回cref
# ----------------------------------------------
# [kernel]
# apphome       -- 项目home ~/workspace/myprj
# pidfile       -- ${apphome}/log/myprj.pid
# mode          -- process_tree  前台模式
#                  logger        后台模式
#                  loggerd       后台模式+Loggerd子进程
# logger_name   -- loggerd模式下Loggerd进程的名称
# logurl        -- 主日志的日志路径
# loglevel      -- 日志级别
# chnl          -- 管道列表: chnl_a chnl_b
# name          -- 主进程显示名称: Zprg
# plugin        -- plugin.pl 
# main          -- main.pl 
# args          -- 
#
# ----------------------------------------------
# 模块配置 
#  1  code, exec只能配置一个
#  2  do code.pl 必须返回一个cref 
#  3  自身是个可执行模块  
# ----------------------------------------------
# [module]
# reader    --  从哪里读
# writer    --  往哪里写
# mreader   --  multi reader
# mwriter   --  multi writer
# code      --  code.pl,
# exec      --  exec.pl, 
# para      --  参数[]
# reap      --  回收
# size      --  启动几个进程
################################################

