package Util::Proto::8583;

use strict;
use warnings;
use Data::Dump;
use Carp qw/cluck/;
use Util::Encode;
use Util::Proto::8583::Constant;
use Util::Proto::8583::Init;

################################################################
#  上下文提供:
#  logger   => $logger
#-------------------------------
#  配置提供(必须):
#  conf     => $conf
#  可选参数: 
#  ver_mac  => 1|0        是否校验mac 
#  txn_conf => $txn_conf  交易确定文件  
#  chk_conf => $chk_conf  一致性检查 bitmap 
#  hsm_info => "Util::HSM::APS | arg1 arg2 arg3 ..."
#-------------------------------
#  其他配置(子类初始化):
#  xxx => yyyy
################################################################
sub new {

  my $class = shift;
  my $args  = { @_ };

  my $conf = delete $args->{conf};

  my %data;
  $data{logger}  = $args->{logger};
  $data{ver_mac} = $args->{ver_mac} || 0;
  $data{gen_mac} = $args->{gen_mac} || 0;
  my $self = bless \%data, $class;
 
  #####################################
  # 读配置文件  
  #####################################
  my $config;
  unless( init_config_file($args->{conf}) ) {
    return undef;
  }

  #####################################
  # 读交易文件  可选参数 
  #####################################
  my $txn;
  if ($args->{txn_conf}) {
    unless($txn = init_txn_file($args->{txn_conf})) {
      return undef;
    }
    $self->{txn} = $txn;
  }

  #####################################
  # 读交易检查文件   可选参数 
  #####################################
  my $chk;
  if ($args->{chk_conf}) {
    unless($chk = init_chk_file($args->{chk_conf}) ) {
     return undef;
    }
    $self->{chk} = $chk;
  }

  #####################################
  #  加密机初始化 可选参数  
  #####################################
  my $hsm;
  if ($args->{hsm_info}) {
    unless($hsm = init_hsm($args->{hsm_info})) {
      return undef;
    }
    $self->{hsm} = $hsm;
  }
  
  #
  # 子类定制初始化  
  #
  unless( $self->_init($args) ) {
    return undef;
  }

  return $self;
}


###########################################
# 将标准格式打包成指定机构的格式
###########################################
sub pack {

  my $self = shift;
  my $swt  = shift;
  my $logger = $self->{logger};
  my $config = $self->{config};

  my $fnum  = @$config;
  my $data;
  my $header;
  my $fld;

  # 打包前处理  
  my $rtn;
  unless( $rtn = $self->_pre_pack($swt) ) {
    $logger->error("pre_pack error");
    return undef;
  }
  $header = $rtn->[0];
  $fld    = $rtn->[1];

  ######################################
  # 生成mac
  ######################################
  my $mac = $self->_gen_mac($header, $fld);
  $fld->[$fnum-1] = $mac if $mac;


  ######################################
  # 消息类型 
  ######################################
  my $mcfg = $config->[0];
  my $mtype;
  if ($mcfg->[DENC_IDX] == DENC_BCD) {
    $mtype = pack("H*", $fld->[0]); 
  }
  elsif ($mcfg->[DENC_IDX] == DENC_ASCII) {
    $mtype = $fld->[0];
  }
  else {
    return undef;
  }

  # bitmap部分 
  ######################################
  my @bitmap = (0) x $fnum;

  ######################################
  # 2 -> 63, 127
  ######################################
  my @fld;
  for (my $i = 2; $i < @$fld; ++$i) {

    next unless defined $fld->[$i];

    my $cfg     = $config->[$i];
    my $idx     = $i+1;
    $bitmap[$i] = 1;
    $logger->debug("begin pack fld[$idx]...");

    ######################################
    # 固定长度  
    ######################################
    if(defined $cfg->[CLASS_IDX] == CLASS_FIX) {

      if ($cfg->[DENC_IDX] == DENC_ASCII) {
        $data .= $fld->[$i]; 
      }

      elsif ($cfg->[DENC_IDX] == DENC_BCD ) {
        $data .= pack('H*', $fld->[$i]);
        $logger->debug("fld[$idx] packed: [", unpack('H*', $data) , "]");
      }
    
      else {
        return undef;
      }
    }

    ######################################
    # LLLVAR
    ######################################
    # warn "begin pack $idx with [@$cfg] data[$fld->[$i]]";
    elsif ($cfg->[CLASS_IDX] == CLASS_LLLVAR) {

      my $dlen;
      if ($cfg->[LENC_IDX] == LENC_BCD) { 
        $dlen = num2bcd(length $fld->[$i]);
        $data .= $dlen;
      }
      elsif ($cfg->[LENC_IDX] == LENC_ASCII)  {
        $dlen = sprintf("%03d", length $fld->[$i]);
        $data .= $dlen;
      }
      else {
        $logger->error("unsupported lenc");
        return undef;
      }

      if ($cfg->[DENC_IDX] == DENC_BCD) {
        $data .= num2bcd($fld->[$i]);
      }
      elsif ($cfg->[DENC_IDX] == DENC_ASCII) {
        $data .= $fld->[$i]; 
      }
      else {
        $logger->error("unsupported denc");
        return undef;
      }
    }
    ######################################
    # LLVAR
    ######################################
    elsif ($cfg->[CLASS_IDX] == CLASS_LLVAR) {

      # 组长度部分  
      my $dlen;
      if ($cfg->[LENC_IDX] == LENC_BCD) { 
        $dlen = sprintf("%04d", length $fld->[$i]);
        $dlen = pack('H*', $dlen);
        $data .= $dlen;
      }
      elsif ($cfg->[LENC_IDX] == LENC_ASCII)  {
        $dlen = sprintf("%04d", length $fld->[$i]);
        $dlen = pack('H*', $dlen);
        $data .= $dlen;
      }
      else {
        $logger->error("unsupported lenc");
        return undef;
      }

      # 组数据部分  
      if ($cfg->[DENC_IDX] == DENC_BCD) {
        $data .= pack('H*', $fld->[$i]);
      }
      elsif ($cfg->[DENC_IDX] == DENC_ASCII) {
        $data .= $fld->[$i]; 
      }
      else {
        $logger->error("unsupported denc");
        return undef;
      }

      $logger->debug("fld[$idx] packed: [", unpack('H*', $data) , "]");
    }

    ######################################
    # YYMM
    ######################################
    elsif ($cfg->[CLASS_IDX] == CLASS_YYMM) {

      if ($cfg->[DENC_IDX] == DENC_ASCII) {
        $data .= $fld->[$i];
      }

      elsif ($cfg->[DENC_IDX] == DENC_BCD ) {
        $data .= pack('H*', $fld->[$i]);
        $logger->debug("fld[$idx] packed: [", unpack('H*', $data) , "]");
      }

      else {
        return undef;
      }

    }
    ######################################
    # MMDD
    ######################################
    elsif ($cfg->[CLASS_IDX] == CLASS_MMDD) {
      if ($cfg->[DENC_IDX] == DENC_ASCII) {
        $data .= $fld->[$i];
      }

      elsif ($cfg->[DENC_IDX] == DENC_BCD ) {
        $data .= pack('H*', $fld->[$i]);
        $logger->debug("fld[$idx] packed: [", unpack('H*', $data) , "]");
      }

      else {
        return undef;
      }

    }
    ######################################
    # HHMMSS
    ######################################
    elsif ($cfg->[CLASS_IDX] == CLASS_HHMMSS) {

      if ($cfg->[DENC_IDX] == DENC_ASCII) {
        $data .= $fld->[$i];
      }

      elsif ($cfg->[DENC_IDX] == DENC_BCD ) {
        $data .= pack('H*', $fld->[$i]);
        $logger->debug("fld[$idx] packed: [", unpack('H*', $data) , "]");
      }

      else {
        return undef;
      }

    }
  }

  # 组bitmap 
  my $bstr   = join '', @bitmap;
  my $bitmap = pack('b64', $bstr);

  # 8583全包  = 消息类型 + bitmap + (2..63|127)
  $data = $mtype . $bitmap . $data;

  # 打包后处理: 如: 全包加密后附加报文头
  unless($self->_post_pack($header, \$data)) {
    $logger->error("post_pack failed");
  }

  return $data;
}

###########################################
# 将外部格式数据转成内部标准格式数据
###########################################
sub unpack {

  my $self   = shift;
  my $data   = shift;
  my $config = $self->{config};
  my $logger = $self->{logger};

  #####################################
  # pre_unpack
  # undef : pre_unpack处理失败
  #     0 : 无header处理
  # href  : 有头部处理， 且返回成功  
  # 如通联pos规范
  #     解开得到报文头，
  #     根据报文头的应用类别(9x) 解密
  #     8583包 
  #####################################
  my $header = $self->_pre_unpack(\$data);
  unless(defined $header) {
    return undef;
  }

  my @fld;

  ########################################
  # 消息类型  
  ########################################
  my $mcfg = $config->[0];
  if ( $mcfg->{DENC_IDX} == DENC_BCD) {
    $fld[0] = unpack("H*", substr($data, 0, 2));
    $data   = substr($data, 2);
  }
  elsif ($mcfg->{DENC_IDX} == DENC_ASCII) {
    $fld[0] = substr($data, 0, 4);
    $data   = substr($data, 4);
  }
  else {
    return undef;
  }

  ########################################
  # 先取8个字节的bitmap  
  ########################################
  my @bitmap;
  my $first =  substr($data, 0, 8);
  for (split '', $first ) {
    push  @bitmap, reverse split '', unpack('b8', $_);
  }
  $data = substr($data, 8);

  if ($bitmap[0] eq '1') {
    my $second = substr($data, 0, 8);
    for (split '', $second) {
      push  @bitmap, reverse split '', unpack('b8', $_);
    }
    $data = substr($data, 8);
  }
  $fld[1] = \@bitmap;


  ########################################
  # 根据bitmap解析报文域  
  ########################################
  use integer;
  for (my $i = 2; $i < @bitmap; ++$i ) {

    next if $bitmap[$i] eq '0';
    my $cfg = $config->[$i];
    my $idx = $i + 1;

    ##################################
    # 定长 
    ##################################
    unless(defined $cfg->[CLASS_IDX]) {

      my $len = $cfg->[LEN_IDX];
      my $dlen;

      # 定长bcd编码  
      if ($cfg->[DENC_IDX] == DENC_BCD) {
        $dlen = ($len + 1) / 2;
        $fld[$i] = unpack('H*' , substr($data,0, $dlen));
        $data = substr($data, $dlen);
      }

      # 定长ASCII编码  
      elsif ($cfg->[DENC_IDX] == DENC_ASCII) {
        $fld[$i] = substr($data, 0, $len);
        $data = substr($data, $len);
      }

      else {
        return undef;
      }
    }

    ##################################
    # LLLVAR
    ##################################
    elsif ($cfg->[CLASS_IDX] == CLASS_LLLVAR) {

      my $dlen;
      # 解开长度部分 
      if ($cfg->[LENC_IDX] == LENC_BCD ) {
        $dlen = unpack("H*", substr($data, 0,2));
        $dlen =~ s/^0+//g;
        $data = substr($data, 2);
      }
      elsif ($cfg->[LENC_IDX] == LENC_ASCII ) {
        $dlen = substr($data, 0, 3);
        $data = substr($data, 3);
      }
      else {
        $logger->error("internal error");
      }

      # 合法性校验:
      if ($dlen > $cfg->[LEN_IDX]) {
        $logger->error("too long");
        return undef;
      }
        
      # 解数据部分  BCD
      if ($cfg->[DENC_IDX] == DENC_BCD ) {
        $dlen = ($dlen + 1) / 2; 
        $fld[$i] = unpack('H*', substr($data, 0, $dlen));
        $data = substr($data, $dlen);
      } 

      # 解数据部分  ASCII
      elsif ($cfg->[DENC_IDX] == DENC_ASCII ) {
        $fld[$i] = substr($data, 0, $dlen);
        $data = substr($data, $dlen);
      }
      else {
        $logger->error("internal error");
        return undef;
      }

      # warn "fld[$i]: $fld[$i]\n";
    }

    ##################################
    # LLVAR
    ##################################
    elsif ($cfg->[CLASS_IDX] == CLASS_LLVAR) {

      my $dlen;
      # 解开长度部分 
      if ($cfg->[LENC_IDX] == LENC_BCD ) {
        $dlen = unpack("H*", substr($data, 0, 1));
        $dlen =~ s/^0+//g;
        $data = substr($data, 1);
      }
      elsif ($cfg->[LENC_IDX] == LENC_ASCII ) {
        $dlen = substr($data, 0, 2);
        $dlen =~ s/^0+//g;
        $data = substr($data, 2);
      }
      else {
        $logger->error("internal error");
      }

      # 合法性校验:
      if ($dlen > $cfg->[LEN_IDX]) {
        $logger->error("too long");
        return undef;
      }
        
      # 解数据部分  BCD
      if ($cfg->[DENC_IDX] == DENC_BCD ) {
        $dlen = ($dlen+1)/2;
        $fld[$i] = unpack('H*', substr($data, 0, $dlen));
        $data = substr($data, $dlen);
      } 

      # 解数据部分  ASCII
      elsif ($cfg->[DENC_IDX] == DENC_ASCII ) {
        $fld[$i] = substr($data, 0, $dlen);
        $data    = substr($data, $dlen);
      }
      else {
        $logger->error("internal error");
        return undef;
      }

      $logger->debug("fld[$idx]: $fld[$i]");
    }
    ##################################
    # hhmmss
    ##################################
    elsif ($cfg->[CLASS_IDX] == CLASS_HHMMSS) {
      if ($cfg->[DENC_IDX] == DENC_BCD) {
        $fld[$i] = unpack("H*", substr($data, 0, 3));
        $data = substr($data, 3);
      }
      elsif($cfg->[DENC_IDX] == DENC_ASCII) {
        $fld[$i] =  substr($data, 0, 6);
        $data    = substr($data, 6);
      }
      else {
        $logger->error("hhmmss error");
      }
    }
    ##################################
    # yymm
    ##################################
    elsif ($cfg->[CLASS_IDX] == CLASS_YYMM) {
      if ($cfg->[DENC_IDX] == DENC_BCD) {
        $fld[$i] = unpack("H*", substr($data, 0, 2));
        $data = substr($data, 2);
      }
      elsif($cfg->[DENC_IDX] == DENC_ASCII) {
        $fld[$i] = substr($data, 0, 4);
        $data    = substr($data, 4);
      }
      else {
        $logger->error("yymm error");
      }
    }
    ##################################
    # mmdd
    ##################################
    elsif ($cfg->[CLASS_IDX] == CLASS_MMDD) {
      if ($cfg->[DENC_IDX] == DENC_BCD) {
        $fld[$i] = unpack("H*", substr($data, 0, 2));
        $data = substr($data, 2);
      }
      elsif($cfg->[DENC_IDX] == DENC_ASCII) {
        $fld[$i] = substr($data, 0, 4);
        $data    = substr($data, 4);
      }
      else {
        $logger->error("mmdd error");
      }
    }
  }

  # 从域信息获取交易名称  
  my $txn_name = $self->_get_txn($header, \@fld);
  unless($txn_name) {
    return undef;
  }

  # 根据交易名称，检查域是否全 
  unless($self->_check_txn($header, \@fld, $txn_name)) {
    return undef;
  }

  # mac校验
  unless ($self->{ver_mac} && $self->{hsm}->ver_mac($self->_mac_block(\@fld))) {
    return undef;
  }

  my $swt = $self->_post_unpack($header, \@fld, $txn_name);
  unless($swt) {
    $logger->error("post_unpack error");
    return undef;
  }

  return $swt;

}

######################################################################################
# 以下需要子类化  
######################################################################################

###########################################
# rewritable method
# 子类定制初始化 rewritable method
###########################################
sub _init {
  my $self = shift;
  my $args = shift;
  return $self;
}

###########################################
# 打包前处理  
# 参数:
#   $swt
# undef:  pre_pack处理失败
# [header, $fld]
###########################################
sub pre_pack {
  my $self = shift;
  my $swt  = shift;
  return undef;
}

###########################################
# 打包后处理 
# 参数:
#   $header
#   \$data
# 返回值:
#   undef:  post_pack处理失败
#   $self:  post_pack成功
#   $data: 
###########################################
sub post_pack {
  my $self   = shift;
  my $header = shift;
  my $dref   = shift;
  return $self;
}


###########################################
# 解包包前处理  
# 参数:
#   $dref
# 返回值:
#   undef:    失败
#   $header:  成功  + $dref
# 这个函数功能:
#
# 1> 通联pos终端规范中 
#    网络类pos需要全包       应用类别 9x
#    传统类的不需要全包加密  应用类别 6x
# _pre_unpack可先解开得到报文头 $header
# 如果$header->{app_type} =~ /^9/
# 则将全包解密  
#
###########################################
sub _pre_unpack {
  my $self = shift;
  my $dref = shift;

  my $header;
  return $header;

}

###########################################
# 解包后处理 
# 参数:
#   $header
#   $fld
# 将报文头信息 填入swt 
###########################################
sub _post_unpack {
  my $self     = shift;
  my $header   = shift;
  my $fld      = shift;
  my $txn_name = shift;

  my %swt;
  return \%swt;
}

###########################################
# 生成mac block
###########################################
sub _mac_block {
  my $self = shift;
  my $data = shift;
  return 'BBBBBBBB';
}

###########################################
# 必须子类化, 根据域信息决定交易名称   
###########################################
sub _get_txn {

  my $self   = shift;
  my $header = shift;
  my $fld    = shift;
  return 'unknow';

}

###########################################
# 检查交易报文的域是否全面 
###########################################
sub _check_txn {

  my $self     = shift;
  my $header   = shift;
  my $fld      = shift;
  my $txn_name = shift;

  return $self;
}

1;

__END__

=head1 Name

  Util::Proto::8583
  
=head1 Synopsis
  
  package MyPosp;
  use base qw/Util::Proto::8583/;
  
  sub _get_txn {
  }
  
  sub _check_txn {
  }
  
  sub _pre_unpack {
  }
  
  sub _post_unpack {
  }
  
  sub _pre_pack {
  }
  
  sub _post_pack {
  }
  
  1;
  
  #!/usr/bin/perl -w
  use strict;
  use MyPosp;
  
  my $proto = MyPosp->new(
  );

=head1 API description

  new        :
  pack       : %swt    =>   packet
  unpack     : packet  =>   %swt

=head2 new

  paramters
  -------------------------------------------------------------------
  conf     =>  /path/of/conf.msg
  chk_conf =>  /path/of/conf.chk
  txn_conf =>  /path/of/conf.txn
  hsm_info =>  'Util::HSM::Xxx | arg1 arg2 arg3...'
  ver_mac  =>  0|1
  gen_mac  =>  0|1
  logger   =>  $logger
  -------------------------------------------------------------------

  Subclass->new(conf => ...);

=head2 pack

  $self->pack($swt);


=head2 unpack

  $self->unpack($packet);

  
=head1 Subclass API

  _init         :  customizable initialization  
  _pre_unpack   :  pre-unpack processing
  _post_unpack  :  post-unpack processing
  _pre_pack     :  pre-pack processing
  _post_pack    :  post-pack processing
  _get_txn      :  get txn name from fields
  _check_txn    :  check completeness of the fields
  _mac_block    :  mac block

=head2 _init

  $self->_init($args);

=head2 _pre_unpack

  $header = $self->_pre_unpack(\$data);

=head2 _post_unpack

  $swt = $self->_post_unpack($header, \@fld, $txn_name);

=head2 _pre_pack

  [$head, $fld] = $self->_pre_pack($swt);

=head2 _post_pack

  $self->_post_pack($header, \$data);

=head2 _get_txn

  $self->_get_txn($heaer, \@fld);

=head2 _check_txn

  $self->_check_txn($header, \@fld, $txn_name);

=head2 _mac_block

  my $mab = $self->_mac_bloc($@fld);


=head1 Pack process description

  1> my ($header, $fld) = $self->_pre_pack($swt);

  2> $mtype = $fld[0] || pack("H*", $fld[0];

  3> @bitmap    = (0) x 64 || (0) x 128;  
     $bitmap[0] = 1; 
     $bitmap[1] = 1;
     $fld[63||127]  = $self->_gen_mac($header, $fld);
  
  4> for ( my $i = 2; $i < @$fld, ++$i ) {
       $data .= $fld[i] || $data .= "LL" . $fld[i] ...;
       $bitmap[$i] = 0 || 1;
     }

  5> $bstr = pack('b64', join '', @bitmap);

  6> $data = $mtype . $bstr . $data

  7> $self->_post_pack($header, \$data);  

  8> return $data


=head1 Unpack process description

  1> my $header = $self->_pre_unpack(\$data);

  2> $fld[0] = msg type

  3> @bitmap

  4> for (my $i = 2; $i < @bitmap; ++$i) {
       $fld[$i] = blah....;
     }

  5> my $txn_name = $self->_get_txn($header, \@fld);
 
  6> $self->_check_txn(\@fld, $txn_name);

  7> my $swt = $self->_post_unpack($header, \@fld, $txn_name)

  6> return $swt;


=head1 AUTHORS & COPYRIGHTS
 
  zcman2005@gmail.com
  
=cut
  
  
