package  Util::Run;
use strict;
use warnings;

use POSIX qw/:sys_wait_h WNOHANG setsid/;
use IO::File;
use IO::Handle;
use Fcntl;
use File::Basename;
use Data::Dump;
use Symbol;
use Util::Log;
use File::Basename;

################################################################################
# singleton模式对象数据结构
################################################################################
our $run_kernel = {};

#
#
sub import {

    my $pkg = shift;
    my $cfg = {@_};
    
    # stdin stdout pre-processing
    require IO::Handle;
    STDOUT->autoflush(1);
    STDIN->blocking(1);

    bless $run_kernel, __PACKAGE__;
    my $callpkg = (caller)[0];
    {
        no strict;
        *{"$callpkg\::run_kernel"} = \$run_kernel;
        return 1;
    }

}

################################################################################
# my $kernel = Util::Run->launch(
#   pidfile      => '/tmp/04_run.pid',        # logger, loggerd need pidfile
#   mode         => 'loggerd',                # logger, process_tree loggerd
#   logger_name  => 'ZLoggerd',               # loggerd's module name
#   logurl       => 'file:///tmp/04_run.log', # logger URL
#   loglevel     => 'DEBUG',                  # log level
#   channel      => [ 'hary', 'jessie ],      # global channles
#   name         => 'Zrun',                   # daemon name
#   context      => {},                       # process_group level resources
# );
# $run_kernel->run(
#   main         => \&main,
#   module       => {
#     'Zhary' => {
#        reader => 'hary',
#        writer => 'jessie',
#        code   => \&fun_hary,
#        exec   => /path/of/exec,    # code|exec 只能有一个
#        para   => [],
#        reap   => 1,
#     },
#
#     'Zjessie' => {
#        reader => 'jessie',
#        writer => 'hary',
#        code   => \&fun_jessie,
#        exec   => /path/of/exec,    # code|exec只能有一个
#        para   => [],
#        reap   => 1,
#     },
#   },
# );
# exit 0;
# sub main {
#   while(1) {pause();}
# }
################################################################################
sub launch {

    my $class = shift;
    my $args  = {@_};

    ######################################
    # 静态配置
    $run_kernel->{mode}    = delete $args->{mode};
    $run_kernel->{runname} = delete $args->{name};
    $run_kernel->{pidfile} = delete $args->{pidfile};
    $run_kernel->{logname} = delete $args->{logname};
    $run_kernel->{context} = delete $args->{context};

    ######################################
    # 动态配置
    my $channel  = delete $args->{'channel'};
    my $loglevel = delete $args->{'loglevel'};
    my $logurl   = delete $args->{'logurl'};

    ####################################
    # 运行模式检查
    ####################################
    unless(&_check_mode()) {
        warn "_check_mode failed";
        exit 0;
    }

    #####################################################
    # 建立全局channel
    #####################################################
    if ($channel) {
        unless ( 'ARRAY' eq ref $channel ) {
            warn "channel argument must be array ref";
            exit 0;
        }
        unless ( &begin_create_channel($channel) ) {
            warn "begin_create_channel failed";
            exit 0;
        }
    }

    ####################################
    # 日志检查
    ####################################
    unless ( &_check_log( $logurl, $loglevel ) ) {
        warn "_check_log failed";
        exit 0;
    }

    ####################################
    # 保存启动命令
    ####################################
    $run_kernel->{cmdline} = $0;

    #####################################################
    # 根据运行模式启动进程组
    #####################################################
    # warn "begin daemonize...";
    unless ( &begin_daemonize( $logurl, $loglevel ) ) {
        warn "begin_daemonize error";
        exit 0;
    }

    return $run_kernel;
}

################################################
#  main  => \&main_func
#  args  => [],
#  module => {
#    MA => {
#    },
#    MB => {
#    },
#  }
################################################
sub run {

    my $self_or_class = shift;
    my $args          = {@_};

    my $main_run  = delete $args->{main};
    my $main_arg  = delete $args->{args};
    my $mlist     = delete $args->{module};
    my $logger    = $run_kernel->{logger};

    ####################################
    # 主回调函数检查
    my $rref = ref $main_run;
    unless ( $rref =~ /CODE/ ) {
        warn "main must be an code ref";
        exit 0;
    }

    ####################################
    # 主回调函数参数检查
    my $aref = ref $main_arg;
    unless ( $aref =~ /ARRAY/ ) {
        warn "main args must be an array ref";
        exit 0;
    }

    ####################################
    # runname名称检查
    unless ( $run_kernel->{runname} ) {
        warn "daemon name must be provided";
        exit 0;
    }

    ####################################
    # 设置信号处理
    unless ( &setup_signal() ) {
        $logger->error("setup_signal failed");
        goto EXIT;
    }

    ####################################
    # 如果没有模块提交
    unless ( defined $mlist ) {
        warn "no module is provided";
        $main_run->($main_arg);
        exit 0;
    }

    ####################################
    # 模块列表检查
    unless ( &_check_module_list($mlist) ) {
        warn "_check_module_list error";
        exit 0;
    }

    ####################################
    # 启动所有模块
    $logger->info("begin start all...");
    unless ( &begin_start_all($mlist) ) {
        $logger->error("begin_start_all failed");
        goto EXIT;
    }

    ####################################
    # 记录启动时间
    my ( $y, $m, $d, $H, $M, $S ) = (localtime)[ 5, 4, 3, 2, 1, 0 ];
    $y += 1900;
    $m += 1;
    $run_kernel->{boottime} = sprintf( "%02d-%02d-%02d %02d:%02d:%02d", $y, $m, $d, $H, $M, $S );

    chomp($run_kernel->{boottime} );

    ####################################
    # main callback
    $main_run->(@$main_arg);

  EXIT:
    $logger->error("begin shutdown...");
    exit 0;
}

#################################################################
# mode must be either of
#  process_tree   :  前台运行进程组
#  logger         :  后台运行
#  loggerd        :  后台运行带日志进程
#################################################################
sub _check_mode {

    my $mode = $run_kernel->{mode};

    unless ( $mode =~ /^(logger|process_tree|loggerd)$/ ) {
        warn "mode must be either of logger process_tree loggerd";
        return;
    }

    #
    # logger and loggerd mode need pidfile
    if ( $mode =~ /^(logger|loggerd)/ ) {
        unless ( defined $run_kernel->{pidfile} ) {
            warn "logger|loggerd mode need pidfile";
            return;
        }
        my $dir = dirname( $run_kernel->{pidfile} );
        unless ( -d $dir ) {
            warn "$dir does not exist";
            return;
        }
    }

    return 1;

}

##########################################################
# loglevel validation
# if running mode is loggerd, logname must be provided
##########################################################
sub _check_log {

    my $logurl   = shift;
    my $loglevel = shift;

    unless ( $loglevel =~ /^(DEBUG|INFO|WARN|ERROR|FATAL|CRIT)$/ ) {
        warn "invalid loglevel";
        return;
    }
    unless ( defined $logurl ) {
        warn "logurl needed";
        return;
    }

    # loggerd mode need logname
    if ( $run_kernel->{mode} =~ /^loggerd$/ ) {
        unless ( defined $run_kernel->{logname} ) {
            warn "logname must be provided";
            return;
        }
    }

    return 1;

}

#########################################################
# 检查模块列表
#   module       => {
#     'Zbat_writer' => {
#        writer => 'chan_zbat',
#        para   => [],
#        code   => \&subroutine
#        exec   => /path/of/exec-file
#        reap   => 1,
#     },
#
#     'Zbat_reader' => {
#        reader => 'chan_zbat',
#        para   =>  [],
#        code   =>  \&subroutine
#        exec   => /path/of/exec-file
#        reap   => 1,
#     },
#   },
#########################################################
sub _check_module_list {

    my $mlist = shift;

    for my $mname ( keys %$mlist ) {

        my $m = $mlist->{$mname};
        unless ( &_check_module($m) ) {
            warn "_check_module[$mname] failed";
            return;
        }
    }

    return 1;
}

##########################################
# 模块检查
##########################################
sub _check_module {

    my $m = shift;

    #check reap
    unless ( exists $m->{'reap'} ) {
        $m->{'reap'} = 1;
    }

    # check reader
    if ( $m->{reader} ) {
        unless ( exists $run_kernel->{channel}->{ $m->{reader} } ) {
            warn "reader channel[$m->{reader}] does not exist";
            return;
        }
    }

    # check writer
    if ( $m->{writer} ) {
        unless ( exists $run_kernel->{channel}->{ $m->{writer} } ) {
            warn "writer channel[$m->{writer}] does not exist";
            return;
        }
    }

    # check mreader
    my %rpipe;
    my @mreader_str;
    if ( $m->{mreader} ) {
        for ( @{ $m->{mreader} } ) {
            unless ( exists $run_kernel->{channel}->{$_} ) {
                warn "mreader channel[$_] does not exist";
                return;
            }
            $rpipe{$_} = $run_kernel->{channel}->{$_}->{reader}->fileno();
            push @mreader_str, "$_:$rpipe{$_}";

        }
    }

    # check mwriter
    my %wpipe;
    my @mwriter_str;
    if ( $m->{mwriter} ) {
        for ( @{ $m->{mwriter} } ) {
            unless ( exists $run_kernel->{channel}->{$_} ) {
                warn "mwriter channel[$_] does not exist";
                return;
            }
            $wpipe{$_} = $run_kernel->{channel}->{$_}->{writer}->fileno();
            push @mwriter_str, "$_:$wpipe{$_}";
        }
    }

    # 模块参数检查
    my $mpara = $m->{'para'};
    my $mpref = ref $mpara;
    unless ( $mpref =~ /ARRAY/ ) {
        warn "invalid para type[$mpref]";
        return;
    }

    # check code and exec
    if ($m->{code} && $m->{exec}) {
      warn "code and exec are mutual exclusive";
      return;
    }

    # 函数指针
    if ($m->{code}) {
        my $mcref = ref $m->{code};
        unless($mcref =~ /CODE/) {
            warn "code must be code ref";
            return;
        } 
    }
    # 可执行文件 
    elsif($m->{exec}) {
        unless( -f $m->{exec} ) {
            warn "file $m->{exec} does not exist";
            return ;
         }
         unless ( -x $m->{exec} ) {
             warn "$m->{exec} is not executable";
             return;
         }
  
         # code为可执行文件时, 多目标writer|reader
         $m->{mw_arg} = join ',', @mwriter_str if @mwriter_str;
         $m->{mr_arg} = join ',', @mreader_str if @mreader_str;
         
         return 1;
    }
    # code, exec 必须有一个设置 
    else {
        warn "either code or exec must be set";
        return;
    }

    return 1;
}

####################################################
# daemonize according configuration
####################################################
sub begin_daemonize {
    my ( $logurl, $loglevel ) = @_;

    my $rtn;
    my $mode = $run_kernel->{mode};

    if ( $mode =~ /^logger$/ ) {
        $rtn = __PACKAGE__->daemonize_logger( $logurl, $loglevel );
    }
    elsif ( $mode =~ /^loggerd$/ ) {
        warn "begin daemonize_loggerd...";
        $rtn = __PACKAGE__->daemonize_loggerd( $logurl, $loglevel );
    }
    elsif ( $mode =~ /^process_tree$/ ) {
        $rtn = __PACKAGE__->process_tree( $logurl, $loglevel );
    }
    else {
        warn "internal error";
        exit 0;
    }
    unless ($rtn) {
        return;
    }
    return 1;
}

####################################################
# create global channel
####################################################
sub begin_create_channel {

    my $clist = shift;

    my %channel;
    for my $cname (@$clist) {
        $run_kernel->{channel}->{$cname} = &new_channel();
    }
    return 1;
}

####################################################
# create a tmp channel
####################################################
sub new_channel {

    no strict;
    $r = gensym;
    $w = gensym;

    pipe( $r, $w );
    $r->blocking(1);
    $w->autoflush(1);

    return {
        reader => $r,
        writer => $w,
    };
}

####################################################
# start all modules
####################################################
sub begin_start_all {
    my $mlist = shift;

    my $logger = $run_kernel->{logger};
    for my $mname ( keys %$mlist ) {

        my $m = $mlist->{$mname};
        $m->{'name'} = $mname;

        my $child;
        if ( exists $m->{size} && $m->{size} > 1 ) {
            $child = __PACKAGE__->batch_child($m);
        }
        else {
            $child = __PACKAGE__->new_child($m);
        }
    }
    return 1;
}

####################################################
# 带有logger对象的后台运行进程组
####################################################
sub daemonize_logger {

    my $class = shift;

    my $logurl   = shift;
    my $loglevel = shift;

    unless ( $class->daemonize(@_) ) {
        return;
    }

    my $logger = Util::Log->new( 'loglevel' => $loglevel, 'logurl' => $logurl );
    unless ($logger) {
        warn "can not Util::Log->new";
        return;
    }

    open STDERR, ">&", $logger->{'logfh'};

    $run_kernel->{logger} = $logger;

    return 1;

}

####################################################
# 带有 loggerd子进程的daemon
####################################################
sub daemonize_loggerd {

    my $class    = shift;
    my $logurl   = shift;
    my $loglevel = shift;

    ##################################
    # daemonize
    ##################################
    unless ( $class->daemonize() ) {
        warn "daemonize error";
        return;
    }

    ##################################
    # loggerd pipe
    ##################################
    my $log_reader;
    my $log_writer;
    pipe( $log_reader, $log_writer ) or die "can not pipe";
    $log_reader->blocking(1);
    $log_writer->autoflush(1);

    ##################################
    # parent logger
    ##################################
    my $logger = Util::Log->new(
        'handle'   => $log_writer,
        'loglevel' => $loglevel,
    );

    unless ( defined $logger ) {
        warn "logger new error";
        return;
    }
    $run_kernel->{logger} = $logger;
    $logger->debug("parent log created");

    ##################################
    # logger child process
    ##################################
    my $child_arg = {
        name => $run_kernel->{logname},
        code => \&loggerd_runner,
        para => {
            loglevel   => $loglevel,
            logurl     => $logurl,
            log_reader => $log_reader,
            log_writer => $log_writer,
        },
        reap => 1,
    };

    unless ( __PACKAGE__->new_child($child_arg) ) {
        warn "new_child process[loggerd] failed";
        return;
    }
    open STDERR, ">&", $log_writer;
    $logger->debug("loggerd is created");

    return 1;
}

##################################
# 前台进程， 带有logger对象
# 标准出错未重定向到日志文件
##################################
sub process_tree {

    my $class    = shift;
    my $logurl   = shift;
    my $loglevel = shift;

    my $config = {@_};

    my $logger = Util::Log->new(
        'logurl'   => $logurl,
        'loglevel' => $loglevel,
    );

    unless ( defined $logger ) {
        warn "Util::Log->new failed";
        return;
    }

    # open STDERR, ">&", $logger->{logfh};

    # ps -ef display name
    $0 = $run_kernel->{runname} if $run_kernel->{runname};

    $run_kernel->{logger} = $logger;

    return 1;

}

##############################################
# setup signal
##############################################
sub setup_signal {

    $SIG{'PIPE'} = 'IGNORE';
    $SIG{'TERM'} = \&sig_term;    # termination
    $SIG{'CHLD'} = \&sig_chld;    # restart the died
    $SIG{'USR1'} = \&sig_usr1;    # restart the died
    $SIG{'HUP'}  = 'DEFAULT';     # very important
    return 1;
}

##############################################
# sig_usr1, 将stopped列表中的进程启动
##############################################
sub sig_usr1 {
    $SIG{USR1} = \&sig_usr1;
    return 1;
}

##############################################
# child died signal handling
##############################################
sub sig_chld {

    my $sig = shift;

    my $logger = $run_kernel->{logger};

    $logger->warn("$0 pid[$$] got SIG$sig");

    my $child;
    while ( ( $child = waitpid( -1, WNOHANG ) ) > 0 ) { ; }

    my $running = $run_kernel->{running};
    for my $name ( keys %$running ) {

        my $pid = $running->{$name}->[0];
        my $arg = $running->{$name}->[1];

        next unless $pid > 0;    # pid < 0 is drop out

        my $rtn = kill( 0, $pid );
        if ( $rtn == 0 ) {

            $logger->warn("kid[$pid => $name] reapable[$arg->{'reap'}] died");

            ######################################
            # 只有这个进程是reapable的才能重启
            ######################################
            if ( $arg->{'reap'} ) {
                $arg->{restart}++;    # 登记重启次数
                # 
                # 当前时间和上次重启时间小于1s, 而重启次数很多
                # 短时间内高重启次数， 将此进程放入stopped队列,然后启动定时器，定时重启stopped中的模块
                # 下次sigchld将不会重启此进程, 
                # 
                my $now = time;
                if ( $now - $arg->{last} < 1 ) {
                    $arg->{'break'}++;
                    if ( $arg->{'break'} > 9 ) {
                        $logger->warn("process $name restarted too frequently, transfer it to stopped");
                        $arg->{'break'} = 0;
                        $run_kernel->{stopped}->{$name} = delete $running->{$name};
                        $logger->warn( Data::Dump->dump($run_kernel) );
                        $SIG{ALRM} = \&sig_alrm;
                        alarm 5;
                        next;
                    }
                }
                else {
                    $arg->{'break'} = 0;
                }

                ############################
                # restart the child
                ############################
                unless ( __PACKAGE__->new_child($arg) ) {
                    $logger->warn("new child $name failed");
                    next;
                }

                $arg->{last} = $now;
                $logger->warn("kid $name restarted");
            }
            ################################
            # 不可回收进程， 直接删除
            ################################
            else {
                delete $running->{$name};
            }
        }
    }
    $SIG{CHLD} = \&sig_chld;

}

##############################################
# got SIGTERM signal
##############################################
sub sig_term {

    my $sig = shift;

    my $logger = $run_kernel->{logger};
    $logger->warn("pid[$$] got SIG$sig");

    local $SIG{TERM} = 'IGNORE';
    local $SIG{CHLD} = 'IGNORE';

    my $running = $run_kernel->{running};
    my $loggerd;

    #
    #  先将logggerd进程摘下
    if ( $run_kernel->{logname} and exists $running->{ $run_kernel->{logname} } ) {
        $loggerd = delete $running->{ $run_kernel->{logname} };
    }
    $logger->warn("ZLogger will be the second last to die") if defined $loggerd;

    my @died;

    # 给所有运行中的进程发送TERM信号
    for my $name ( keys %$running ) {
        my $pid = $running->{$name}->[0];
        my $arg = $running->{$name}->[1];
        $logger->warn("begin kill $name pid[$pid]");
        kill 'TERM', $pid if $pid > 0;
        push @died, $pid;
    }

    # 对于所有被发送了TERM信号的进程， 检查是否死掉?
    for (@died) {
        my $rtn = kill( 0, $_ );
        if ( $rtn != 0 ) {
            sleep 0.2;
            next;
        }
    }

    # 保证日志进程loggerd为最后一个退出的子进程
    if ( defined $loggerd ) {
        my $log_pid = $loggerd->[0];
        $logger->warn("begin kill ZLogger pid[$log_pid]");
        kill 'TERM', $log_pid;
    }
    else {
        $logger->warn("$0: all child died");
    }

    # 删除pid文件
    unlink $run_kernel->{pidfile}
      if defined $run_kernel->{pidfile} and -f $run_kernel->{pidfile};

    # 主进程退出
    exit 0;

}


##############################################
# 定期将stopped列表中进程启动
##############################################
sub sig_alrm {

    my $logger = $run_kernel->{logger};
    $logger->warn("SIGALRM recieved...");
    my $stopped = delete $run_kernel->{stopped};
    for my $dormant ( keys %$stopped ) {
        $logger->warn("begin wakeup $dormant...");
        my $arg = $stopped->{$dormant}->[1];
        unless ( __PACKAGE__->new_child($arg) ) {
            $logger->warn("new child $dormant failed");
            next;
        }
        $run_kernel->{running}->{$dormant} = delete $stopped->{$dormant};
    }
    $SIG{ALRM} = \&sig_alrm;
    alarm 5;
}

#########################################################
# argument:
# {
#  name    => process_name
#  code    => sub ref       函数
#  exec    => /path/of/file
#  para    => [] 
#  reader  => 'chan_a',
#  writer  => 'chan_b',
#  mreader => [],
#  mwriter => [],
# }
#########################################################
sub new_child {

    my $class_or_self = shift;
    my $args          = shift;

    my $logger = $run_kernel->{logger};

    $logger->debug( "new child with args:\n", Data::Dump->dump($args) );

    $args->{last} = time;

    my $child = fork;
    unless ( defined $child ) {
        warn "fork error";
        return;
    }

    ####################
    # parent
    ####################
    if ($child) {
        $run_kernel->{running}->{ $args->{'name'} } = [ $child, $args ];    #
        return $class_or_self;
    }
    ####################
    # child
    ####################
    else {
        &child_process($args);
        exit 0;
    }

}

#################################################################
#  {
#  name   => process_name
#  code   => sub ref
#  exec   => exec file
#  para   => []     
#  reader =>
#  writer =>
#  size   => 10
#  }
#################################################################
sub batch_child {

    my $class_or_self = shift;

    my $args   = shift;
    my $logger = $run_kernel->{logger};
    $logger->debug( "batch_child args:\n", Data::Dump->dump($args) );

    my $batch_name = $args->{'name'};
    my $size       = delete $args->{'size'};

    $logger->info("batch_child[$batch_name] size[$size] reap[$args->{'reap'}]");

    for ( my $idx = 0 ; $idx < $size ; ++$idx ) {

        my $child = fork;
        unless ( defined $child ) {
            warn "fork error";
            return;
        }

        ##########################
        # parent
        ##########################
        if ($child) {
            my %reg = %$args;
            $reg{'last'} = time;
            $reg{'name'} = $batch_name . "." . $idx;
            $run_kernel->{running}->{ $reg{'name'} } = [ $child, \%reg ];    # register child
            next;
        }
        ##########################
        # child
        ##########################
        else {
            $args->{'name'} = $batch_name . "." . $idx;
            &child_process($args);
            exit 0;
        }
    }

    return 1;
}

############################################
# 子进程处理
############################################
sub child_process {

    my $args    = shift;
    my $logger  = $run_kernel->{logger};
    my $channel = $run_kernel->{channel};

    my $code = $args->{'code'};
    my $exec = $args->{'exec'};

    my $para = $args->{'para'};
    my $name = $args->{'name'};
    my ( $reader, $rw );
    my ( $writer, $wr );

    if ( $args->{reader} ) {
        $reader = $channel->{ $args->{'reader'} }->{reader};
        $rw     = $channel->{ $args->{'reader'} }->{writer};
    }
    if ( $args->{writer} ) {
        $writer = $channel->{ $args->{'writer'} }->{writer};
        $wr     = $channel->{ $args->{'writer'} }->{reader};
    }

    #
    # setup prctl name
    #
    $0 = $name;

    #
    # reader, writer是两个特殊的参数
    # 
    if ($reader) {
        close($rw);
        open STDIN, "<&", $reader;    # child read from stdin is read from child
    }
    if ($writer) {
        close($wr);
        open STDOUT, ">&", $writer;
    }

    #
    # 外部可执行代码
    #
    if ( defined $exec && -f $exec ) {

        #
        # mwriter && mreader
        #
        if ( $args->{mr_arg} ) {
            for ( @{ $args->{mreader} } ) {
                fcntl( $run_kernel->{channel}->{$_}->{reader}, F_SETFD, 0 ) ;    # closeonexec set to 0
                close( $run_kernel->{channel}->{$_}->{writer} );
            }
        }
        if ( $args->{mw_arg} ) {
            for ( @{ $args->{mwriter} } ) {
                fcntl( $run_kernel->{channel}->{$_}->{writer}, F_SETFD, 0 );     # closeonexec set to 0 
                close( $run_kernel->{channel}->{$_}->{reader} );
            }
        }
        
        my $mr = $args->{mr_arg} || 'mr';
        my $mw = $args->{mw_arg} || 'mw';
	      $logger->debug("mr => $mr, mw => $mw");
        if ( $mr eq 'mr' && $mw eq 'mw' ) {     # no multi-reader, no multi writer
            $logger->debug("exec($exec @$para --process_name $name)");
            exec( $exec, @$para, "--process_name", $name );
        }
        else  {
	          if ( $mr eq 'mr' ) {                 #  have multi-writer
              $logger->debug("exec($exec @$para --mwriter $mw  --process_name $name)");
              exec( $exec, @$para, "--mwriter",$mw, "--process_name", $name );
            }
            elsif( $mw eq 'mw' ) {                 # have multi-reader
              $logger->debug("exec($exec @$para --mreader $mr --process_name $name)");
              exec( $exec, @$para, "--mreader", $mr, "--process_name", $name );
            }
            else {                                  # have both multi-reader and multi-writer
              $logger->debug("exec($exec @$para --mreader $mr --mwriter $mw --process_name $name)");
              exec( $exec, @$para, "--mreader", $mr, "--mwriter", $mw, "--process_name", $name );
            }
	      }
        exit 0;
    }

    # 内部函数指针
    else {
        unless(defined $code) {
            warn "internal error code is not code ref";
            exit 0;
        }

        my $cref = ref $code;
        unless($cref =~ /CODE/ ) { 
            warn "internal error code is not code ref";
            exit 0;
        }

        # no strict;
        $run_kernel->{logger} = $run_kernel->{logger}->clone("$name.log");
        open STDERR, ">&", $run_kernel->{logger}->{logfh}; 

        # setup default signal handler
        local $SIG{TERM} = sub { $run_kernel->{logger}->error("I(child) am exiting..."); CORE::exit(0); };
        local $SIG{INT}  = sub { exit 0; };
        local $SIG{CHLD} = 'IGNORE';
        local $SIG{HUP}  = 'DEFAULT';

        # 执行
        $code->($para);
        exit 0;

    }
   
    exit 0;

}

#######################################
# is the daemon running
#######################################
sub _is_running {

    if ( $run_kernel->{pidfile} && -f $run_kernel->{pidfile} ) {
        my $pid = `cat $run_kernel->{pidfile}`;
        chomp($pid);
        my @ps = `ps auxw | grep $pid | grep -v grep`;
        return 1 if ( $ps[0] );
        return 0;
    }

}

#######################################
# 开始一个session
#######################################
sub daemonize {

    my $class   = shift;
    my $pidfile = shift;

    if ( &_is_running() ) {
        warn "$0: already running....";
        return;
    }

    my $grand_father = fork();
    exit if $grand_father;

    unless ( defined $grand_father ) {
        die "Couldn't fork!: $!";
    }

    unless ( POSIX::setsid() ) {
        die "Couldn't start a new session: $!";
    }

    ##################################
    # pid file
    ##################################
    my $pidfh;
    if ( $run_kernel->{pidfile} ) {
        $pidfh = IO::File->new("> $run_kernel->{pidfile}");
    }
    elsif ($pidfile) {
        $pidfh = IO::File->new("> $pidfile");
    }
    if ($pidfh) {
        $pidfh->print($$);
        $pidfh->close();
    }

    $0 = $run_kernel->{'runname'} if $run_kernel->{'runname'};

    return 1;

}

##################################################
# loggerd runner
###################################################
sub loggerd_runner {

    my $para = shift;

    my $log_writer = $para->{'log_writer'};
    my $log_reader = $para->{'log_reader'};
    my $logurl     = $para->{'logurl'};

    close $log_writer;
    Util::Log->loggerd( 'logurl' => $logurl, 'pipereader' => $log_reader );
    exit 0;
}

##########################################################
# 获取通道的读端
##########################################################
sub channel_reader {
    my $self = shift;
    my $name = shift;
    return $run_kernel->{channel}->{$name}->{'reader'};
}

##########################################################
# 获取通道的写端
##########################################################
sub channel_writer {
    my $self = shift;
    my $name = shift;
    return $run_kernel->{channel}->{$name}->{'writer'};
}

##########################################################
# 
##########################################################
sub get_option {

    my $class = shift;
    my %args;
    my $idx = 0;
    for (@ARGV) {
      if($ARGV[$idx] =~ /^--(mreader|mwriter|process_name)$/) {
        last;
      }
      $idx++;
    }
    %args = @ARGV[$idx .. $#ARGV]; # 新增的命令行参数
    @ARGV = @ARGV[0 .. $idx - 1];  # 原来的命令行参数

    # Data::Dump->dump(\%args, \@ARGV);

    my %multi;
    for my $type (qw/mreader mwriter/) {
        next unless exists $args{"--$type"};
        my $mode = 'w';
        if ($type =~ /--mreader/) {
           $mode = 'r';
        }
        for ( split ',', $args{"--$type"} ) {
            if (/(.*):(\d+)/) {
                eval {
                    unless ( $multi{$type}{$1} = IO::Handle->new_from_fd( $2, $mode )) {
                        warn "[$!]" if $!;
                    }
                    $multi{$type}{$1}->autoflush(1);
                };
                if ($@) {
                    warn "[$@]";
                    return;
                }
            }
        }
    }
    $multi{name} = $args{'--process_name'};
    return \%multi;
}

###############################################
# get logger object
###############################################
sub logger {
    my $self = shift;
    return $run_kernel->{logger};
}

###############################################
# internal child logger clone
# $run_kernel->child_logger('ModuleA', 'ERROR');
###############################################
sub child_logger {
    my $self     = shift;
    my $name     = shift;
    my $loglevel = shift;
    return $run_kernel->{logger}->clone( "$name.log", $loglevel );
}

###############################################
# 增加全局管道
###############################################
sub add_channel {

    my $self = shift;
    my $name = shift;

    if ( exists $run_kernel->{channel}->{$name} ) {
        $run_kernel->{logger}->error("channel[$name] already exists");
        return;
    }

    $run_kernel->{channel}->{$name} = &new_channel();

    return 1;
}

###############################################
# 增加 context
###############################################
sub add_context {
    my $self = shift;
    my $args = {@_};
    for my $k ( keys %$args ) {
        if ( exists $run_kernel->{context}->{$k} ) {
            $run_kernel->{logger}->error("context $k already exists");
            return;
        }
        $run_kernel->{context}->{$k} = $args->{$k};
    }
    return $self;
}

###############################################
# 删除 context
###############################################
sub del_context {
    my $self = shift;
    my $k    = shift;
    delete $run_kernel->{context}->{$k};
    return $self;
}

sub context {
    my $self = shift;
    return $run_kernel->{context};
}

###############################################
# 提交一个模块运行
###############################################
sub submit {

    my $self  = shift;
    my $mname = shift;
    my $args  = shift;

    $args->{'name'} = $mname;
    my $logger = $run_kernel->{logger};

    ###########################
    # check module name
    ###########################
    if (   exists $run_kernel->{running}->{$mname}
        || exists $run_kernel->{running}->{"$mname.0"}
        || exists $run_kernel->{stopped}->{"$mname"}
        || exists $run_kernel->{stopped}->{"$mname.0"} )
    {
        $logger->error("module $mname already exists, reassign a module name");
        $logger->error( Data::Dump->dump($run_kernel) );
        return;
    }

    ##############################################
    # set reap flag, 默认模块是可回收的
    ##############################################
    unless ( exists $args->{'reap'} ) {
        $args->{'reap'} = 1;
    }

    ##########################
    # check module_code: 检查模块参数
    ##########################
    unless ( &_check_module($args) ) {
        $logger->debug("module[$mname] _check_module failed");
        return;
    }

    ##########################
    # begin start module...
    ##########################
    if ( exists $args->{'size'} && $args->{'size'} > 1 ) {
        my $child = __PACKAGE__->batch_child($args);
    }
    else {
        my $child = __PACKAGE__->new_child($args);
    }
    return 1;

}


1;

__END__

=head1 NAME
  
  Util::Run - an process && IPC management module


=head1 SYNOPSIS

  #!/usr/bin/perl -w
  use strict;

  use Util::Run;
  my $kernel = Util::Run->launch();

  $kernel->run();
  exit 0;


=head1 API

  launch  :
  run     :
  submit  :
  logger  :


=head1 tutorial

=head2 section 1

	section1 begin
	section1 end
 
=head2 section 2

	section2 begin
	section2 end
 

=head1 Author & Copyright

  zcman2005@gmail.com

=cut
