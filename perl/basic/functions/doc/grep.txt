       grep BLOCK LIST
       grep EXPR,LIST
               This is similar in spirit to, but not the same as, grep(1) and
               its relatives.  In particular, it is not limited to using
               regular expressions.

               Evaluates the BLOCK or EXPR for each element of LIST (locally
               setting $ to each element) and returns the list value
               consisting of those elements for which the expression evaluated
               to true.  In scalar context, returns the number of times the
               expression was true.

                   @foo = grep(!/^#/, @bar);    # weed out comments

               or equivalently,

                   @foo = grep {!/^#/} @bar;    # weed out comments

               Note that $ is an alias to the list value, so it can be used
               to modify the elements of the LIST.  While this is useful and
               supported, it can cause bizarre results if the elements of LIST
               are not variables.  Similarly, grep returns aliases into the
               original list, much as a for loop's index variable aliases the
               list elements.  That is, modifying an element of a list
               returned by grep (for example, in a "foreach", "map" or another
               "grep") actually modifies the element in the original list.
               This is usually something to be avoided when writing clear
               code.

               If $ is lexical in the scope where the "grep" appears (because
               it has been declared with "my $") then, in addition to being
               locally aliased to the list elements, $ keeps being lexical
               inside the block; i.e., it can't be seen from the outside,
               avoiding any potential side-effects.

               See also "map" for a list composed of the results of the BLOCK
               or EXPR.