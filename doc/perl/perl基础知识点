Chapter 1
    1. 在Perl中不必事先定义一个变量是什么类型的变量，在perl从，$test告诉perl，test是一个标量，也就是包含单个值的变量。与此对应的数组变量使用@开头。（可将$理解成"s" 或 "scalar"标量，而@表示"a" 或 "array" 数组帮助记忆。 Perl还有"散列(hash)", "句柄(handle)",  "typeglob"等其他一些变量类型，与标量和数组一样，这些变量也是前置一些趣味字符。

    perl中的标量可以赋值为整数，浮点数，字符串，甚至指向其他变量或对象的引用这样深奥的东西。与unix中的shell编程类似，可以使用不同的引号来获得不同的值，双引号进行变量内插(variable interpolation)和反斜杠内插(backslash interpolation)(比如把\n转成换行符)，单引号取消内插。而反引号(``)将执行外部程序并返回程序的输出，且将其赋值给变量。(进程替换)

    perl有两种类型的多值变量：数组和散列(hash)，在很多方面，它们和标量很相似，比如它们也会在需要时自动存在；但是，当你给它们赋值时，它们和标量就不一样了。它们在赋值等式右边提供列表(list)环境而不是标量环境。

    数组和散列也不相同，当你想通过编号来查找东西时，需要用数组，而如果你想通过名称来查找东西，那么应该用散列，这两种概念是互补的。数组是多个标量的有序列表，可以用标量在列表中的位置来访问其中的标量，列表中可以包含数字，字符串或同时包含两者；要对一个数组赋值，只需简单地将这些值排列在一起，并用大括号括起来：

    my @home = ("couch", "chair", "table", "stove");
    
    相反，如果在列表环境中使用@home，例如在一个列表赋值的右边，那么你将得到与你放进数组时同样的列表。所以可用如下所示从数组给四个标量赋值：
    my ($potato, $lift, $tennis, $pips) = @home ;
    和在C语言中一样，数组是以0开始计数的，可以用索引0到3来表示数组的第1个到第4个元素。如$home[n],这里n是脚标(索引)

    散列是一组无序标量，可以通过和每个标量关联的字符串进行访问，因为此原因，散列经常被称为关联数组(associative array)。
    my %longday = ( 
            "sun"   => "sunday",
            "mon"   => "monday",
            "tue"   => "tuesday",
            "wed"   => "wednesday",
            "thu"   => "thursday",
            "fri"   => "friday",
            "sat"   => "saturday",
             ) ;
     散列是一种特殊的数组，可以通过{}来获取单个的散列元素，比如你想找出与键wed对应的值，应该使用$longday{"wed"}。注意：因为是在处理标量，因此在longday前面使用$，而不是%，%代表整个散列。

    2. perl中的操作符，perl内置的操作符可以根据操作的数目分为一元，二元和三元操作符，也可以根据操作符的位置分为前缀(放在操作数前面)和中缀操作符(在操作数中间)以及后缀操作符(在操作数后面)。

    二元算术操作符  ：  +(加)   -(减)  *(乘)   /(除)   %(模)   **(幂)

    字符串操作符    ：  .(.操作符完成字符串的连接)  x(字符串的乘号，重复操作符)
    如 $a = 123;
       $b = 3 ;
       print $a * $b ;      # 打印369
       print $a x $b ;      # 打印123123123

    赋值操作符      ： 可以将=理解为"设为"而不是"等于"(数学等于操作符==才表示等于。 ==操作符相当于一个返回布尔值的函数，而=则相当于一个用于修改变量值的过程)。

    一元算术操作符  ： ++(自增) --(自减)

    逻辑操作符,也称为"短路(short-circuit)"操作符，允许程序不使用嵌套if语句，而根据多个条件来决定执行流程，它们之所以被称为"短路"操作符，是因为当认为左边的参数能够提供足够的信息来决定整个值时，它们将跳过(短路)执行右边的参数，这不仅仅是为了提高效率，可以依靠这种"短路"特性来避免执行为左边代码做防护(guarding)的右边的代码。
    例子        名字        结果
    ---------------------------------------------------------------
    $a && $b    与      如果$a为假，则为$a, 否则为$b
    $a || $b    或      如果$a为真，则为$a, 否则为$b
    ! $a        非      如果$a为假，则为真

    $a and $b   与      如果$a为假，则为$a, 否则为$b
    $a or  $b   或      如果$a为真，则为$a, 否则为$b
    not $a      非      如果$a为假，则为真
    $a xor $b  异或     如果$a或$b为真，但不同时为真，则值为真

    比较操作符告诉我们两个标量值(数字或字符串)之间的比较关系，这里有两组关系比较操作符，一组用于数字比较，另一组用于字符串比较(两组操作符都要求所有的参数都必须先转换成合适的类型)，假设两个参数是$a和$b，我们可以：
    比较            数字    字符串      返回值
    -------------------------------------------------------------------
    等于            ==      eq          如果$a等于$b,返回真
    不等于          !=      ne          如果$a不等于$b，返回真 
    小于            <       lt          如果$a小于$b, 返回真
    大于            >       gt          如果$a大于$b, 返回真
    小于或等于      <=      le          如果$a不大与$b，返回真
    大于或等于      >=      ge          如果$a不小于$b, 返回真
    比较           <=>     cmp          相等是为0,$a大则为1，$b大则为-1

    文件测试操作符
    例子           名字         结果
    -----------------------------------------------------------------
    -e $a           存在        如果在$a中命名的文件存在，则为真
    -r $a           可读        如果在$a中命名的文件可读，则为真
    -w $a           可写        如果在$a中命名的文件可写，则为真
    -d $a           目录        如果在$a中命名的文件是目录，则为真
    -f $a           文件        如果在$a中命名的文件是普通文件，则为真
    -T $a         文本文件      如果在$a中命名的文件是文本文件，则为真
