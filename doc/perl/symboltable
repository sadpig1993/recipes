符号表 symbol table
包的内容总体在一起称为符号表(symbol table)。


符号表用于组织和存储Perl的软件包(全局)变量，每个软件包都有一个类似于哈希表的符号表，它包含了该软件包的所有的typeglob，它不是一个真正的Perl的哈希表，只是行为上有些相像，它的名字是软件包的名字加上两个冒号。如main包的符号表是%main::

符号表不是一个普通的哈希表，不过我们可以用操作符号keys来查看它的内容，我们可以看下软件包main中定义的所有符号名(demo--main_symbol.pl)

我们可以通过typeglob操作符号表。

软件包变量和词法变量的区别：
1). 符号表会记录软件包变量，但是不会记录词法变量。当我们操作符号表或typeglob时，我们改变的是软件包变量(全局变量),在整个程序范围内都可见。

2). 词法变量的作用域范围有限，它们只会影响部分程序。

当我们说到一个符号表"包含(contain)"其他的符号表时，我们的意思是它包含指向其他符号表的引用。因为main是顶级包，它包含一个指向自己的引用，结果是%main::和%main::main::，或%main::main::main::, 等等，都一样，直到无穷。如果自己写的代码包括遍历所有的符号表，那么一定要注意这种情况。

在符号表的散列里，每一个key/value对都把一个变量名字和它的值匹配起来，key是符号标识符，而value则是对应的typeglob。因此如果value使用*NAME表示法，那么你实际上只是在访问散列里的一个值，该值保存当前包的符号表里。实际上，下面的东西有(几乎)一样的效果:
    *sym    =  *main::variable;
    *sym    =  $main::{"variable"};
第一种形式更高效，因为main符号表是在编译时被访问的，而且它还会在该名字的typeglob不存在时创建一个新的，第二种则不会。
